# -*- coding: utf-8 -*-
"""opec_streamlined.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u2XeOSv3oxt7_FK_me6aAD-w_QLAxt54
"""

#pip install tabula-py

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sb
import plotly.express as px
import tabula as tb

import matplotlib.pyplot as plt
from datetime import datetime
from datetime import date
import math

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

#from google.colab import drive
#drive.mount('/content/drive')

# st.title(
    #"Current Production of OPEC Member Countries")

st.markdown("<h1 style='color: color:green;font-size: 24px;'>Current Production of OPEC Member Countries</h1>",
unsafe_allow_html=True)

op3_df = pd.read_excel('/Users/doyindav/Downloads/ASB2023_selected/T35.xlsx',
                            dtype='object')

# create a function for the analysis process
def clean_plot(df):
  df.drop([0], inplace=True)

  # rename the columns
  df.columns = df.iloc[0]

  # drop the index [1]
  df.drop([1], inplace=True)

  # rename column 2
  df.columns = df.columns.fillna('country')

  to_remove = ['OECD Americas', 'OECD Europe', 'Other Asia', 'OECD Asia Pacific', 'Latin America', 'Middle East', 'Africa', 'Africa', 'Other Eurasia']

  # Create a boolean mask for rows to keep
  mask = ~df['country'].isin(to_remove)

  # Apply the mask to the DataFrame
  df = df[mask]

  # drop unecesssary rows at the bottom
  df.drop([64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], axis=0, inplace=True)

  # reset index because of an index error
  df.reset_index(drop=True, inplace=True)

  # rename the 'others'
  df['country'].iloc[7]='Others_OECD_Europe'
  df['country'].iloc[9]='Others_OECD_Asia_Pacific'
  df['country'].iloc[17]='Others_Asia'
  df['country'].iloc[24]='Others_Latin_America'
  df['country'].iloc[49]='Others_Africa'
  df['country'].iloc[53]='Others_Eurasia'

  # drop Africa and middle east rows
  df.drop([36, 25], inplace=True)

  df = df.rename_axis(None)

  # transform the dataframe
  df = df.T
  df = df.rename_axis(None)

  df.columns = df.iloc[0]

  df = df.iloc[1:]

  df = df.reset_index()

  df.rename(columns={'index':'year'}, inplace=True)

  df = pd.melt(df, id_vars=['year'], value_vars=(list(df.columns)))

  df['year'] = df['year'].astype(int)
  df.rename(columns={'value':'1000 b/d'}, inplace=True)

  # remove the total world, opec bit in the dataframe
  df = df[~df['country'].isin(['OECD', 'OPEC', 'Total World ', 'OPEC Share in %'])]

  # continent list
  africa_list = ['Algeria', 'Angola', 'Cameroon', 'Chad', 'Congo', 'Egypt', 'Equatorial Guinea',
               'Gabon', 'Ghana', 'Libya', 'Nigeria', 'Sudans', 'Others_Africa']

  europe_list = ['Denmark', 'Norway', 'United Kingdom', 'Other_Europe', 'Others_OECD_Europe']
  asia_list = ['Australia', 'Others_OECD_Asia_Pacific', 'China', 'India', 'Brunei', 'Indonesia'
              'Malaysia', 'Thailand', 'Vietnam, Others_Asia']
  latin_america = ['Argentina', 'Brazil', 'Colombia', 'Ecuador', 'Guyana', 'Venezuela', 'Others_Latin_America']
  middle_east = ['Bahrain', 'IR Iran', 'Iraq', 'Kuwait', 'Oman', 'Qatar', 'Saudi Arabia', 'Syrian Arab Rep',
               'United Arab Emirates', 'Yemen']
  eurasia = ['Russia', 'Other_Eurasia', 'Azerbaijan', 'Kazakhstan']
  america_list = ['Canada', 'Chile', 'Mexico', 'United States']

  # create new column containing the continents of the countries
  df.loc[df['country'].isin(africa_list), 'Continent'] = 'Africa'
  df.loc[df['country'].isin(europe_list), 'Continent'] = 'Europe'
  df.loc[df['country'].isin(asia_list), 'Continent'] = 'Asia'
  df.loc[df['country'].isin(latin_america), 'Continent'] = 'Latin America'
  df.loc[df['country'].isin(middle_east), 'Continent'] = 'Middle East'
  df.loc[df['country'].isin(eurasia), 'Continent'] = 'Eurasia'
  df.loc[df['country'].isin(america_list), 'Continent'] = 'America'
  df.loc[df['country']=='Others_Eurasia', 'Continent'] = 'Eurasia'
  df.loc[df['country']=='Other Europe', 'Continent'] = 'Europe'

  fig = px.scatter(df, x='year', y='1000 b/d',
	                 hover_name ='country', color='country')
  fig.show()

  return df

# opec_df = clean_plot(op3_df)

# opec_df.head()

### Current Oil Production ###
def current_func():
    file = '/Users/doyindav/Downloads/OPEC_MOMR_September_2023.pdf'
    to_extract = tb.read_pdf(file, pages ='59', stream=True)
    current_df = to_extract[0]
    current_df.columns = current_df.iloc[0]
    # drop the first row
    current_df.drop([0], axis=0, inplace=True)
    current_df.rename(columns={'sources':'country'}, inplace=True)
    return current_df

current_df = current_func()
st.write('Current Oil Production for August 2023')
selected_countries = st.sidebar.selectbox('Select Countries', current_df['country'].unique())

# Filter the DataFrame based on the selected countries
filtered_df = current_df[current_df['country'] == selected_countries]

st.text(f"{filtered_df['country'].values[0]} has produced {filtered_df['Aug 23'].values[0]},000 barrels of oil.")

# can you plot a chart for production back a few years
bar_columns = current_df.columns[-4:-1]  # Selecting '2021', '2022', '4Q22'

# Melt the DataFrame for better plotting
melted_df = pd.melt(current_df, id_vars=['country'], value_vars=bar_columns, var_name='Year', value_name='Production')
melted_df['Production'] = melted_df['Production'].replace({',': ''}, regex=True).astype(float)

# Create the bar chart
fig = px.bar(melted_df[melted_df['country']==selected_countries], x='Year', y='Production', color='Year',
             labels={'sources': 'Country', 'Production': "Oil Production ('000)"},
             title='Production Comparison for the previous 3 months',
             )
#fig.update_yaxes(range=[0, 30000])
# Show the plot
st.plotly_chart(fig)
